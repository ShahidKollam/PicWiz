# docker-compose.test.yml

version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb-test
    networks:
      - test-network
  
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-test
    networks:
      - test-network
  
  # Your Image Upload Service
  image-upload-service:
    build:
      context: ./services/image-upload-service
      dockerfile: Dockerfile.upload-service # Using your production Dockerfile
    container_name: image-upload-service-test
    environment:
      MONGO_URI: mongodb://mongodb:27017/imageprocessor-test
      RABBITMQ_URI: amqp://rabbitmq
      SHARED_STORAGE_PATH: /app/images
    networks:
      - test-network
    depends_on:
      - mongodb
      - rabbitmq
    volumes:
      # Mount your local code, but not node_modules
      - ./services/image-upload-service:/usr/src/app
      # Use a named volume for node_modules so it's not overwritten
      - node_modules_image_upload_test:/usr/src/app/node_modules
    command: npm start

  # The container that runs your tests!
  test-runner:
    build:
      context: ./services/image-upload-service
      dockerfile: Dockerfile.test
    container_name: integration-test-runner
    networks:
      - test-network
    depends_on:
      - image-upload-service
    volumes:
      # Mount your local code, but not node_modules
      - ./services/image-upload-service:/usr/src/app
      # Use the same named volume for node_modules
      - node_modules_image_upload_test:/usr/src/app/node_modules
    command: npm test

volumes:
  node_modules_image_upload_test: # Define the named volume here

networks:
  test-network:
    driver: bridge