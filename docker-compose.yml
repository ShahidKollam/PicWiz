version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db # Persist MongoDB data
    networks:
      - image_app_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 50s

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - image_app_network
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  image-upload-service:
    build:
      context: ./services/image-upload-service
      dockerfile: Dockerfile.upload-service
    container_name: image-upload-service
    ports:
      - '5000:5000'
    environment:
      MONGO_URI: mongodb://mongodb:27017/imageprocessor
      RABBITMQ_URI: amqp://rabbitmq
      SHARED_STORAGE_PATH: /app/images
      NODE_ENV: development
      PORT: 5000
    volumes:
      - ./services/image-upload-service:/usr/src/app
      - node_modules_image_upload:/usr/src/app/node_modules # <-- CHANGED TO NAMED VOLUME
      - shared_images:/app/images
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - image_app_network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  image-processor-service:
    build:
      context: ./services/image-processor-service
      dockerfile: Dockerfile.processor-service
    container_name: image-processor-service
    ports:
      - "5001:5001"
    environment:
      MONGO_URI: mongodb://mongodb:27017/imageprocessor
      RABBITMQ_URI: amqp://rabbitmq
      SHARED_STORAGE_PATH: /app/images
      NODE_ENV: development
      PORT: 5001
    volumes:
      - ./services/image-processor-service:/usr/src/app
      - node_modules_image_processor:/usr/src/app/node_modules # <-- CHANGED TO NAMED VOLUME
      - shared_images:/app/images
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - image_app_network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.notification-service
    container_name: notification-service
    ports:
      - '5002:5001'
    environment:
      RABBITMQ_URI: amqp://rabbitmq
      NODE_ENV: development
      PORT: 5001
    volumes:
      - ./services/notification-service:/usr/src/app
      - node_modules_notification:/usr/src/app/node_modules # <-- CHANGED TO NAMED VOLUME
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - image_app_network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    container_name: frontend
    ports:
      - '3000:5173'
    networks:
      - image_app_network
    depends_on:
      image-upload-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    volumes:
      - ./frontend:/usr/src/app
      - node_modules_frontend:/usr/src/app/node_modules # <-- ADDED THIS CRITICAL LINE
    command: npm run dev # <-- CHANGED: npm install is now done in Dockerfile

volumes:
  mongodb_data:
  rabbitmq_data:
  shared_images:
  node_modules_frontend: # <-- ADDED THIS DEFINITION
  node_modules_image_upload: # <-- ADDED THIS DEFINITION
  node_modules_image_processor: # <-- ADDED THIS DEFINITION
  node_modules_notification: # <-- ADDED THIS DEFINITION

networks:
  image_app_network:
    driver: bridge